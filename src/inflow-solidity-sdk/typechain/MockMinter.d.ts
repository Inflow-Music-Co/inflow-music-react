/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    BaseContract,
    ContractTransaction,
    Overrides,
    CallOverrides
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface MockMinterInterface extends ethers.utils.Interface {
    functions: {
        'approveCollateral(address,uint256)': FunctionFragment;
        'collateral()': FunctionFragment;
        'inflow1155BC()': FunctionFragment;
        'mint(uint256)': FunctionFragment;
        'onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)': FunctionFragment;
        'onERC1155Received(address,address,uint256,uint256,bytes)': FunctionFragment;
        'socialToken()': FunctionFragment;
        'supportsInterface(bytes4)': FunctionFragment;
    };

    encodeFunctionData(
        functionFragment: 'approveCollateral',
        values: [string, BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: 'collateral', values?: undefined): string;
    encodeFunctionData(functionFragment: 'inflow1155BC', values?: undefined): string;
    encodeFunctionData(functionFragment: 'mint', values: [BigNumberish]): string;
    encodeFunctionData(
        functionFragment: 'onERC1155BatchReceived',
        values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
    ): string;
    encodeFunctionData(
        functionFragment: 'onERC1155Received',
        values: [string, string, BigNumberish, BigNumberish, BytesLike]
    ): string;
    encodeFunctionData(functionFragment: 'socialToken', values?: undefined): string;
    encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;

    decodeFunctionResult(functionFragment: 'approveCollateral', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'collateral', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'inflow1155BC', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'onERC1155BatchReceived', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'onERC1155Received', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'socialToken', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;

    events: {};
}

export class MockMinter extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    listeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
    off<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    on<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    once<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): this;

    listeners(eventName?: string): Array<Listener>;
    off(eventName: string, listener: Listener): this;
    on(eventName: string, listener: Listener): this;
    once(eventName: string, listener: Listener): this;
    removeListener(eventName: string, listener: Listener): this;
    removeAllListeners(eventName?: string): this;

    queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
        event: TypedEventFilter<EventArgsArray, EventArgsObject>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

    interface: MockMinterInterface;

    functions: {
        approveCollateral(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        collateral(overrides?: CallOverrides): Promise<[string]>;

        inflow1155BC(overrides?: CallOverrides): Promise<[string]>;

        mint(
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        onERC1155BatchReceived(
            arg0: string,
            arg1: string,
            arg2: BigNumberish[],
            arg3: BigNumberish[],
            arg4: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        onERC1155Received(
            arg0: string,
            arg1: string,
            arg2: BigNumberish,
            arg3: BigNumberish,
            arg4: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        socialToken(overrides?: CallOverrides): Promise<[string]>;

        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
    };

    approveCollateral(
        spender: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateral(overrides?: CallOverrides): Promise<string>;

    inflow1155BC(overrides?: CallOverrides): Promise<string>;

    mint(
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
        arg0: string,
        arg1: string,
        arg2: BigNumberish[],
        arg3: BigNumberish[],
        arg4: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
        arg0: string,
        arg1: string,
        arg2: BigNumberish,
        arg3: BigNumberish,
        arg4: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    socialToken(overrides?: CallOverrides): Promise<string>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    callStatic: {
        approveCollateral(
            spender: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        collateral(overrides?: CallOverrides): Promise<string>;

        inflow1155BC(overrides?: CallOverrides): Promise<string>;

        mint(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

        onERC1155BatchReceived(
            arg0: string,
            arg1: string,
            arg2: BigNumberish[],
            arg3: BigNumberish[],
            arg4: BytesLike,
            overrides?: CallOverrides
        ): Promise<string>;

        onERC1155Received(
            arg0: string,
            arg1: string,
            arg2: BigNumberish,
            arg3: BigNumberish,
            arg4: BytesLike,
            overrides?: CallOverrides
        ): Promise<string>;

        socialToken(overrides?: CallOverrides): Promise<string>;

        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    };

    filters: {};

    estimateGas: {
        approveCollateral(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        collateral(overrides?: CallOverrides): Promise<BigNumber>;

        inflow1155BC(overrides?: CallOverrides): Promise<BigNumber>;

        mint(
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        onERC1155BatchReceived(
            arg0: string,
            arg1: string,
            arg2: BigNumberish[],
            arg3: BigNumberish[],
            arg4: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        onERC1155Received(
            arg0: string,
            arg1: string,
            arg2: BigNumberish,
            arg3: BigNumberish,
            arg4: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        socialToken(overrides?: CallOverrides): Promise<BigNumber>;

        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    };

    populateTransaction: {
        approveCollateral(
            spender: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        collateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        inflow1155BC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        mint(
            tokenId: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        onERC1155BatchReceived(
            arg0: string,
            arg1: string,
            arg2: BigNumberish[],
            arg3: BigNumberish[],
            arg4: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        onERC1155Received(
            arg0: string,
            arg1: string,
            arg2: BigNumberish,
            arg3: BigNumberish,
            arg4: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        socialToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        supportsInterface(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;
    };
}
